<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在 VS Code 中配置 C/C++ 编译器</title>
    <link href="/2024/04/02/configure-c-and-cpp-compiler-in-vscode/"/>
    <url>/2024/04/02/configure-c-and-cpp-compiler-in-vscode/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>以下内容摘自<ahref="https://zh.wikipedia.org/wiki/Visual_Studio_Code">维基百科</a>：</p><blockquote><p>Visual Studio Code（简称 VSCode）是一款由微软开发且跨平台的免费源代码编辑器。该软件以扩展的方式支持语法高亮、代码自动补全（又称IntelliSense）、代码重构功能，并且内置了命令行工具和 Git版本控制系统。用户可以更改主题和键盘快捷方式实现个性化设置，也可以通过内置的扩展程序商店安装其他扩展以拓展软件功能。<br></p></blockquote><p>既然它这么强大，那我们今天就来学习如何在 VS Code 中配置 C/C++。</p><h1 id="前置知识">前置知识</h1><p>　　以下是笔者认为读者必须了解的一些前置知识。</p><p>　　要想在 VS Code 里配置好 C/C++编译器，那么掌握这些内容是必不可少的。至少，读者可以知道自己在做什么。</p><h2 id="visual-studio-code-与-ide-的关系">1. Visual Studio Code 与 IDE的关系</h2><p><strong>VS Code不是IDE（Integrated DevelopmentEnvironment，集成开发环境）！！！</strong></p><p>　　这也是很多人容易忽视的点。</p><p>　　正如之前维基百科上所写，Visual Studio Code 是一款编辑器。而 IDE通常包括「<em>源代码编辑器</em>」、「<em>自动构建工具</em>」、通常还包括「<em>调试器</em>」。举个栗子，像很多人使用的Dev-C++ 就是一款IDE，因为它不仅包括编辑器，还自带编译器<code>tdm-gcc</code> 与调试器 <code>GDB</code>。像其他的IDE还有VisualStudio（注意这不是<code>Visual Studio Code</code>），JetBrains公司的IDEA系列等等。</p><p><strong>Visual Studio Code 虽然不是IDE，但它可以通过安装强大的的扩展来达到 IDE 的效果。</strong></p><h2 id="环境变量">2. 环境变量</h2><p>　　环境变量，就相当于C/C++里的宏定义，只不过它一般是给操作系统使用的。</p><p>　　例如，在 C/C++ 中，使用无符号长整型每次都要打<code>unsigned long long</code>实在是太长了，而且代码里需要用到很多次。这时候就要用到宏，只需要在头文件后面加上<code>#define unsigned long long ull</code>，再在下次需要用到无符号长整型时，只需要打上 <code>ull</code>就可以了。</p><p>　　环境变量也是如此，每个环境变量的 <code>变量名</code> 与<code>值</code> 一一对应。（不同的是，一个 <code>变量名</code>可以对应多个 <code>值</code> ）</p><details><summary>尝试一下（点击可展开或折叠）</summary><blockquote><p>若读者正在使用 <code>Windows</code> 操作系统，不妨按住<i class="fa fa-windows"></i> + R 打开「运行」后，输入<code>%USERPROFILE%</code>后点击「确定」，是不是打开了用户的个人文件夹呢？</p></blockquote><blockquote><p>或者读者可能正在使用 <code>Linux</code> 操作系统，不妨在终端输入<code>echo $PATH</code> 试试？（该命令可查看系统的环境变量<code>$PATH</code>）</p></blockquote></details><h1 id="开始配置">开始配置</h1><p>　　配置环境变量会因不同平台而异，本篇文章主要讨论如何在 Windows操作系统上配置 <code>gcc</code> 或 <code>g++</code> 编译器。</p><h2 id="从-dev-c-配置环境变量">从 Dev-C++ 配置环境变量</h2><p>　　Dev-C++是一个轻量级C/C++集成开发环境，它内置了编辑器、编译器和连接器，提供语法高亮，还有多样的调试功能。相比与其他C/C++集成开发环境，Dev-C++具有功能简洁、便于使用的优点。</p><p>　　以下教程以 Dev-C++ 5.9.2 为例。</p><h3 id="step-1-定位-gccg-编译器目录">Step 1: 定位 gcc/g++编译器目录</h3><p>　　打开 Dev-C++ 的安装目录，如下图所示。（若无法找到，可右键 Dev-C++的快捷方式，然后点击「打开文件所在位置」）</p><figure><img src="https://s2.loli.net/2024/04/04/uRx2qpzBnwG7rb6.png"alt="Dev-C++ 的安装目录" /><figcaption aria-hidden="true">Dev-C++ 的安装目录</figcaption></figure><p>　　然后依次打开「MinGW64」-&gt;「bin」，如下图所示。</p><figure><img src="https://s2.loli.net/2024/04/04/wosfWEG53qdDmzF.png"alt="依次打开「MinGW64」-&gt;「bin」后的目录" /><figcaptionaria-hidden="true">依次打开「MinGW64」-&gt;「bin」后的目录</figcaption></figure><p>　　点击上方的地址栏，将路径复制下来。</p><figure><img src="https://s2.loli.net/2024/04/04/vYWfdxtIFpjBbTm.png"alt="复制这串路径" /><figcaption aria-hidden="true">复制这串路径</figcaption></figure><h3 id="step-2-配置系统环境变量">Step 2: 配置系统环境变量</h3><p>　　前面说到，环境变量的作用就是给系统提供一个可以随时调用的变量。如果我们将一个文件夹添加至环境变量，那么这个文件夹里的所有程序都会被添加到环境变量。所以，我们需要做的，就是将刚才复制下来的路径添加到环境变量。这样，无论什么程序都可以调用编译器了。</p><p>　　按住 <i class="fa fa-windows"></i> + R 打开「运行」，输入<code>sysdm.cpl</code> 后点击「确定」。</p><figure><img src="https://s2.loli.net/2024/04/04/nLtXeNduVlvMzrH.png"alt="打开「运行」，并输入sysdm.cpl" /><figcaptionaria-hidden="true">打开「运行」，并输入sysdm.cpl</figcaption></figure><p>　　依次点击「高级」选项卡 -&gt;「环境变量」，如下图所示。</p><figure><img src="https://s2.loli.net/2024/04/04/VSuHbTc9nrU82dy.png"alt="点击「高级」选项卡 -&gt;「环境变量」" /><figcaption aria-hidden="true">点击「高级」选项卡-&gt;「环境变量」</figcaption></figure><p>　　在下方「系统变量」中找到名为「Path」的变量，选中这一行并点击「编辑」。</p><figure><img src="https://s2.loli.net/2024/04/04/Rh4NvGD6WtQyUqj.png"alt="找到名为「Path」的变量并选中" /><figcaption aria-hidden="true">找到名为「Path」的变量并选中</figcaption></figure><p>　　在弹出的窗口中点击「新建」，将刚刚复制的路径粘贴上去，然后点击「确定」。</p><figure><img src="https://s2.loli.net/2024/04/04/kf5Mi4oOpSQuRja.png"alt="点击「新建」并将路径贴上" /><figcaption aria-hidden="true">点击「新建」并将路径贴上</figcaption></figure><p>　　这样就大功告成了。若想得知是否配置成功，可打开 cmd 并输入<code>gcc --version</code>，若能正确输出 gcc 版本号，那便是成功了。</p><h3 id="step-3-在-visual-studio-code-中安装-cc-扩展">Step 3: 在 VisualStudio Code 中安装 C/C++ 扩展</h3><p>　　前面我们将 Dev-C++集成的编译器添加到了环境变量，但我们还差一步就能在 Visual Studio Code中愉快地编写 C/C++ 代码了。</p><p>　　打开 Visual StudioCode（若之前已经打开，则需要<strong>关闭窗口并重新打开</strong>），点击左侧侧边栏的「扩展」（快捷键为Control-Shift-X），然后输入扩展名即可查找扩展，如下图所示。</p><figure><img src="https://s2.loli.net/2024/04/04/xcUyCKRGVvnqkSw.png"alt="点击「扩展」，并搜索相应扩展" /><figcaption aria-hidden="true">点击「扩展」，并搜索相应扩展</figcaption></figure><p>　　这里我们主要安装以下两个扩展：</p><ul><li><code>C/C++</code>（用于代码分析）</li><li><code>Code Runner</code>（这是一个可运行多种语言代码的扩展，涵盖了一些主流语言包括C,C++, Java, JavaScript, PHP, Python, Go, Objective-C, Rust等）</li></ul><p><img src="https://s2.loli.net/2024/04/04/bj7pRqQnIghJs1M.png"alt="C/C++" /> <imgsrc="https://s2.loli.net/2024/04/04/SyvhsRg4BK7HeWO.png"alt="Code Runner" /></p><p>　　安装好上面两个扩展后，我们需要对第二个扩展稍微配置一下。</p><p>　　打开 <code>Code Runner</code> 扩展页，点击<i class="fa fa-cog"></i> 并点击「扩展设置」，如下图所示。</p><figure><img src="https://s2.loli.net/2024/04/04/UCGJVpOvMcgqaK2.png"alt="打开扩展设置" /><figcaption aria-hidden="true">打开扩展设置</figcaption></figure><p>　　在里面找到并勾选「Run In Terminal」（在终端中打开）和「Save FileBefore Run」（运行前保存文件），如下图所示。</p><figure><img src="https://s2.loli.net/2024/04/04/PNTxWfujJdkvK6B.png"alt="打开「Run In Terminal」和「Save File Before Run」" /><figcaption aria-hidden="true">打开「Run In Terminal」和「Save FileBefore Run」</figcaption></figure><p>　　这样就大功告成了。</p><h3 id="step-4-hello-world">Step 4: Hello, world</h3><p>　　为检验配置是否成功，我们写一个如下的 C++ 小程序测试一下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> c;<br>    string s;<br>    <span class="hljs-keyword">while</span> ((c = <span class="hljs-built_in">getchar</span>()) != <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>        s += c;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello, &quot;</span> &lt;&lt; s &lt;&lt; <span class="hljs-string">&quot;!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>　　点击右上角的 <i class="fa fa-play"></i>即可运行。运行结果如下：</p><figure><img src="https://s2.loli.net/2024/04/04/oWSAqcp4H9Z3JIV.png"alt="代码运行结果" /><figcaption aria-hidden="true">代码运行结果</figcaption></figure><p>　　这样就算完成了。</p><h1 id="总结">总结</h1><p>　　在本篇文章中，我们学习了什么是环境变量，如何配置环境变量，以及如何在Visual Studio Code使用它。其实配置所有的语言都要遵循这些过程，如果读者能深刻理解其中的原理，便可轻松地将其他编程语言也配置成功。</p>]]></content>
    
    
    <categories>
      
      <category>Visual Studio Code</category>
      
      <category>编程</category>
      
      <category>环境配置</category>
      
      <category>C</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境变量</tag>
      
      <tag>VS Code</tag>
      
      <tag>配置</tag>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于本博客未来规划的重大通知</title>
    <link href="/2024/04/01/An-Esstential-Decision/"/>
    <url>/2024/04/01/An-Esstential-Decision/</url>
    
    <content type="html"><![CDATA[<p>由于本人的规划发生改变，以后会很少把时间和精力放到更新博客上去，因此更新文章的时间会完全随机。希望大家能够理解。</p>]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一堵墙的故事</title>
    <link href="/2024/03/21/a-story-about-wall/"/>
    <url>/2024/03/21/a-story-about-wall/</url>
    
    <content type="html"><![CDATA[<h1 id="一个男孩和墙的故事">一个男孩和「墙」的故事</h1><p>一堵墙。</p><p>男人看着这堵墙，从他还是个男孩的时候，到下巴上冒出细细的胡须，又到成为一个真正的男人。墙也从最坚固的样子慢慢衰颓。</p><p>这次一定要征服它，一定可以「征服」它。男人心想。</p><p>说来也奇怪，小时候与小伙伴玩闹，打赌谁能爬上这堵墙，男孩就从没赢过。不管用怎样的方法，甚至把家里的梯子搬出来，也没能成功爬上去，一次也没有。</p><p>久而久之，这堵墙成了男孩的心结，即使成年后，只要站在这堵墙前，就仍然是那个四五岁不服输的小男孩。</p><p>男人开始攀爬，这么多年来，他已经对墙砖的位置烂熟于心。哪一块砖微微凸出来，可以抓住或者作为落脚的地方，男人都了然于心。但他不明白为什么总是在最接近墙头的时候失败。</p>这次能够成功吗？<h1>世界本触手可及。</h1>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>awesome-go-zh 中文版</title>
    <link href="/2024/03/05/awesome-go-zh/"/>
    <url>/2024/03/05/awesome-go-zh/</url>
    
    <content type="html"><![CDATA[<p>近日准备将 <ahref="https://github.com/avelino/awesome-go">awesome-go</a>翻译下来，目前放在了我的子站 <ahref="https://go.liedou.cc">go.liedou.cc</a>。</p><p><strong>此页面会不定时更新。</strong></p><blockquote><p>Tips: 这个项目收录了很多 Golang 优质的第三方库。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>docs</category>
      
      <category>Go</category>
      
      <category>编程</category>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docs</tag>
      
      <tag>文档</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 的「time」命令在 Windows 中的替代品</title>
    <link href="/2024/03/04/alt-time-command-in-windows/"/>
    <url>/2024/03/04/alt-time-command-in-windows/</url>
    
    <content type="html"><![CDATA[<p>相信大家对 Linux 中的 <code>time</code>命令都不陌生吧，它可以计算命令的运行时间。例如： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ZSH">$ time go run hello.go<br>Hello, world!<br>go run hello.go  0.64s user 0.33s system 143% cpu 0.674 total<br></code></pre></td></tr></table></figure></p><p>那么 Windows 有没有类似的命令呢？答案是有的。</p><p>在 <code>Windows Powershell</code> 中，可以使用<code>Measure-Command</code> 命令来查看命令的运行时间。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Powershell"><span class="hljs-built_in">Measure-Command</span> &#123; YOUR_COMMAND_HERE &#125;<br></code></pre></td></tr></table></figure><p>以下是一个简单的例子：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Powershell"><span class="hljs-built_in">PS</span> C:\users\mclie&gt; <span class="hljs-built_in">Measure-Command</span> &#123;go run hello.go | <span class="hljs-built_in">Out-Default</span>&#125;<br>Hello, world!<br><br><br>Days              : <span class="hljs-number">0</span><br>Hours             : <span class="hljs-number">0</span><br>Minutes           : <span class="hljs-number">0</span><br>Seconds           : <span class="hljs-number">0</span><br>Milliseconds      : <span class="hljs-number">582</span><br>Ticks             : <span class="hljs-number">5828546</span><br>TotalDays         : <span class="hljs-number">6.74600231481481</span>E<span class="hljs-literal">-06</span><br>TotalHours        : <span class="hljs-number">0.000161904055555556</span><br>TotalMinutes      : <span class="hljs-number">0.00971424333333333</span><br>TotalSeconds      : <span class="hljs-number">0.5828546</span><br>TotalMilliseconds : <span class="hljs-number">582.8546</span><br></code></pre></td></tr></table></figure><p>在上面的例子中，我们执行了 <code>go run hello.go</code> 并指定<code>Out-Default</code> 参数来让 Powershell输出命令结果（不指定则不输出），最终可以观察到运行该命令花费了 0.5828546秒。</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>Windows 10</category>
      
      <category>Windows 11</category>
      
      <category>Windows Powershell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完美解决 Win 10 对 OGG 文件操作时发生卡顿的 BUG</title>
    <link href="/2024/02/19/solve-windows-ogg-bug/"/>
    <url>/2024/02/19/solve-windows-ogg-bug/</url>
    
    <content type="html"><![CDATA[<p style="text-decoration:line-through;">（不愧为bugwin……）</p><p><b>注:Windows 10 22H2可完美解决此问题。Windows11暂未测试，欢迎大家在下面留言分享测试结果。</b></p><h1 id="问题复现">问题复现</h1><p>今天玩tts的时候发现一个音频文件是 .ogg格式的，但由于文件名太乱了，所以准备先给它改名成1.ogg。但改完的时候发现了窗口突然卡死： <imgsrc="https://s2.loli.net/2024/02/26/Xj3WbtnF6wZflPm.webp"alt="explorer.exe 未响应" /></p><p>把整个文件夹删除也不行： <imgsrc="https://s2.loli.net/2024/02/26/f7jR6DkQcS4FdwA.webp"alt="删除文件卡在 0%" /></p><h1 id="原因分析">原因分析</h1><p>经过网络搜索之后，发现这是因为当进入有 .OGG文件的文件夹时，会调用一个叫「Web媒体扩展」的小插件，来获取ogg文件的一些信息。但是这个插件的性能极差，才导致了这次BUG 的发生。</p><h1 id="解决方案">解决方案</h1><p>按住【Windows 徽标键】+【i】打开「设置」，选择「应用」，找到「Web媒体扩展」并点击「卸载」即可。 <imgsrc="https://s2.loli.net/2024/02/26/SnzL36WCRHbepd5.webp"alt="卸载「Web 媒体扩展」" />卸载完成之后，再去对OGG文件进行更名、删除、移动等操作就畅通无阻了。</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>Windows 10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>bug</tag>
      
      <tag>solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
