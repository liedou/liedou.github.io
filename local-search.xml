<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于本博客未来规划的重大通知</title>
    <link href="/2024/04/01/An-Esstential-Decision/"/>
    <url>/2024/04/01/An-Esstential-Decision/</url>
    
    <content type="html"><![CDATA[<p>由于本人的规划发生改变，以后会很少把时间和精力放到更新博客上去，因此更新文章的时间会完全随机。希望大家能够理解。</p>]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一堵墙的故事</title>
    <link href="/2024/03/21/a-story-about-wall/"/>
    <url>/2024/03/21/a-story-about-wall/</url>
    
    <content type="html"><![CDATA[<h1 id="一个男孩和墙的故事">一个男孩和「墙」的故事</h1><p>一堵墙。</p><p>男人看着这堵墙，从他还是个男孩的时候，到下巴上冒出细细的胡须，又到成为一个真正的男人。墙也从最坚固的样子慢慢衰颓。</p><p>这次一定要征服它，一定可以「征服」它。男人心想。</p><p>说来也奇怪，小时候与小伙伴玩闹，打赌谁能爬上这堵墙，男孩就从没赢过。不管用怎样的方法，甚至把家里的梯子搬出来，也没能成功爬上去，一次也没有。</p><p>久而久之，这堵墙成了男孩的心结，即使成年后，只要站在这堵墙前，就仍然是那个四五岁不服输的小男孩。</p><p>男人开始攀爬，这么多年来，他已经对墙砖的位置烂熟于心。哪一块砖微微凸出来，可以抓住或者作为落脚的地方，男人都了然于心。但他不明白为什么总是在最接近墙头的时候失败。</p>这次能够成功吗？<h1>世界本触手可及。</h1>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>awesome-go-zh 中文版</title>
    <link href="/2024/03/05/awesome-go-zh/"/>
    <url>/2024/03/05/awesome-go-zh/</url>
    
    <content type="html"><![CDATA[<p>近日准备将 <ahref="https://github.com/avelino/awesome-go">awesome-go</a>翻译下来，目前放在了我的子站 <ahref="https://go.liedou.cc">go.liedou.cc</a>。</p><p><strong>此页面会不定时更新。</strong></p><blockquote><p>Tips: 这个项目收录了很多 Golang 优质的第三方库。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>docs</category>
      
      <category>Golang</category>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docs</tag>
      
      <tag>文档</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 的「time」命令在 Windows 中的替代品</title>
    <link href="/2024/03/04/alt-time-command-in-windows/"/>
    <url>/2024/03/04/alt-time-command-in-windows/</url>
    
    <content type="html"><![CDATA[<p>相信大家对 Linux 中的 <code>time</code>命令都不陌生吧，它可以计算命令的运行时间。例如： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ZSH">$ time go run hello.go<br>Hello, world!<br>go run hello.go  0.64s user 0.33s system 143% cpu 0.674 total<br></code></pre></td></tr></table></figure></p><p>那么 Windows 有没有类似的命令呢？答案是有的。</p><p>在 <code>Windows Powershell</code> 中，可以使用<code>Measure-Command</code> 命令来查看命令的运行时间。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Powershell"><span class="hljs-built_in">Measure-Command</span> &#123; YOUR_COMMAND_HERE &#125;<br></code></pre></td></tr></table></figure><p>以下是一个简单的例子：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Powershell"><span class="hljs-built_in">PS</span> C:\users\mclie&gt; <span class="hljs-built_in">Measure-Command</span> &#123;go run hello.go | <span class="hljs-built_in">Out-Default</span>&#125;<br>Hello, world!<br><br><br>Days              : <span class="hljs-number">0</span><br>Hours             : <span class="hljs-number">0</span><br>Minutes           : <span class="hljs-number">0</span><br>Seconds           : <span class="hljs-number">0</span><br>Milliseconds      : <span class="hljs-number">582</span><br>Ticks             : <span class="hljs-number">5828546</span><br>TotalDays         : <span class="hljs-number">6.74600231481481</span>E<span class="hljs-literal">-06</span><br>TotalHours        : <span class="hljs-number">0.000161904055555556</span><br>TotalMinutes      : <span class="hljs-number">0.00971424333333333</span><br>TotalSeconds      : <span class="hljs-number">0.5828546</span><br>TotalMilliseconds : <span class="hljs-number">582.8546</span><br></code></pre></td></tr></table></figure><p>在上面的例子中，我们执行了 <code>go run hello.go</code> 并指定<code>Out-Default</code> 参数来让 Powershell输出命令结果（不指定则不输出），最终可以观察到运行该命令花费了 0.5828546秒。</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>Windows 10</category>
      
      <category>Windows 11</category>
      
      <category>Windows Powershell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完美解决 Win 10 对 OGG 文件操作时发生卡顿的 BUG</title>
    <link href="/2024/02/19/solve-windows-ogg-bug/"/>
    <url>/2024/02/19/solve-windows-ogg-bug/</url>
    
    <content type="html"><![CDATA[<p style="text-decoration:line-through;">（不愧为bugwin……）</p><p><b>注:Windows 10 22H2可完美解决此问题。Windows11暂未测试，欢迎大家在下面留言分享测试结果。</b></p><h1 id="问题复现">问题复现</h1><p>今天玩tts的时候发现一个音频文件是 .ogg格式的，但由于文件名太乱了，所以准备先给它改名成1.ogg。但改完的时候发现了窗口突然卡死： <imgsrc="https://s2.loli.net/2024/02/26/Xj3WbtnF6wZflPm.webp"alt="explorer.exe 未响应" /></p><p>把整个文件夹删除也不行： <imgsrc="https://s2.loli.net/2024/02/26/f7jR6DkQcS4FdwA.webp"alt="删除文件卡在 0%" /></p><h1 id="原因分析">原因分析</h1><p>经过网络搜索之后，发现这是因为当进入有 .OGG文件的文件夹时，会调用一个叫「Web媒体扩展」的小插件，来获取ogg文件的一些信息。但是这个插件的性能极差，才导致了这次BUG 的发生。</p><h1 id="解决方案">解决方案</h1><p>按住【Windows 徽标键】+【i】打开「设置」，选择「应用」，找到「Web媒体扩展」并点击「卸载」即可。 <imgsrc="https://s2.loli.net/2024/02/26/SnzL36WCRHbepd5.webp"alt="卸载「Web 媒体扩展」" />卸载完成之后，再去对OGG文件进行更名、删除、移动等操作就畅通无阻了。</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>Windows 10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>bug</tag>
      
      <tag>solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
